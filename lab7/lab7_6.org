#+title: CS120 Lab *7* Section *6*
#+author: Heyan Huang
#+startup: beamer
#+latex_class: beamer
#+options: H:1 num:t toc:nil

* Quiz for Week 6 *Answers* 
All of the following questions are based on the class position, which is defined as:
  #+begin_src
class position {
private:
    int x;
    int y;
public:
    int distance();
};
  #+end_src
- Write the code to declare a single object named *center* of type position:

  *position center;*
- Write code to have the object named center call the *distance()* function.

  *center.distance();*

* Quiz for Week 6 *Answers* (continued)
All of the following questions are based on the class position, which is defined as:
  #+begin_src
class position {
private:
    int x;
    int y;
public:
    int distance();
};
  #+end_src
- What are the data members of the class?

  *x and y.*
- What are the member functions (methods) of the class?

  *distance().*
- If there was a constructor function for this class, what would the name of the function be?

  *position()*

* Quiz for Week 7 *Answers* 
  (5 pt) Answer the following questions based on the following array declaration:
  #+begin_src
int hand[5];
  #+end_src
  - How many elements (pieces of data) can the array hand store?
    Answer: *5*

    *Declare* an array: 

      int *arrayName* [ *lengthOfArray* ]; 

    and *int* is arrayName's *Data Type*.
\\
  - The index of the *first element* of the array?

    Answer: *0*

    Array indices are *0-based*.
\\

  - What is the index of the *last element* of the array?

    Answer: *4*

    Since array indices are *0-based*, index of the *last* element of the array comes out to be *lengthOfArray - 1*.

\\

* Quiz for Week 7 *Answers* (continued)
  (5 pt) Answer the following questions based on the following array declaration:
  #+begin_src
int hand[5];
  #+end_src
  - Write a line of code to assign the second element of the array the value 7.

    Answer: *hand[ 1 ] = 7;*

    Since array indices are *0-based*, index of the *second* element of the array comes out to be *2 - 1*, and continue...
\\
  - Write a line of code to print the last element of the array.

    Answer: *cout << hand[ 4 ];*

    Since array indices are *0-based*, index of the *last* element of the array comes out to be *lengthOfArray - 1*, and continue...
\\

* Scores of Quiz Week 6
\\
- *Lab 5* Score Distribution
|------------------------+-----+----+-----+----+--------|
| Score                  | 8.5 |  9 | 9.5 | 10 | Missed |
|------------------------+-----+----+-----+----+--------|
| Section *4* Count (22) |   1 |  2 |   8 |  9 |      2 |
|------------------------+-----+----+-----+----+--------|
| Section *6* Count (24) |   0 | 10 |   0 |  3 |     11 |
|------------------------+-----+----+-----+----+--------|
\\
- *Quiz for Week 6* Distribution:
|------------------------+---+---+---+---+---+---+--------|
| Score                  | 0 | 1 | 2 | 3 | 4 | 5 | Missed |
|------------------------+---+---+---+---+---+---+--------|
| Section *4* Count (22) | 1 | 1 | 3 | 7 | 5 | 3 |      2 |
|------------------------+---+---+---+---+---+---+--------|
| Section *6* Count (24) | 0 | 0 | 2 | 9 | 3 | 3 |      7 |
|------------------------+---+---+---+---+---+---+--------|
\\
- *Lab 6* Score Distribution
|------------------------+---+----+----+----+--------|
| Score                  | 9 | 11 | 12 | 13 | Missed |
|------------------------+---+----+----+----+--------|
| Section *4* Count (22) | 0 |  1 |  8 | 11 |      2 |
|------------------------+---+----+----+----+--------|
| Section *6* Count (24) | 2 |  2 |  1 |  9 |     10 |
|------------------------+---+----+----+----+--------|

* Lab 6 Randome Number Generator
  - #include < *cstdlib* >
\\
  - Prototype: *int rand (void);*
  - This number is generated by an algorithm that returns a sequence of apparently non-related numbers each time it is called. 
  - Returns a pseudo-random integral number in the range between 0 and RAND\textunderscore MAX.
  - RAND\textunderscore MAX is a constant defined in <cstdlib>.
\\
  - Examples:
    - v1 = rand() % 100;
    - v2 = rand() % 100 + 1;
    - v3 = rand() % 30 + 1985; 
\\ 
  - Seed
    - This algorithm uses a seed to generate the series, which should be initialized to some distinctive value using function srand.
    - /* initialize random seed: */

        *srand (time(NULL));*
* Lab 6 Specific Requirements
- *cscheckin*:
    - *Source Program* only
    - program name: *Lab7Sec6.cpp*
\\
- *Hard Copy*:
    - *Source Program*: *Lab7Sec6.cpp*
    - *Script Output* of the program: 
\\
- *Extra Credits*:
    - *Extra Work* are required in order to extra points. 
    - It won't be easy to get all *3* extra credits, so make sure you make effort to earn them. 
